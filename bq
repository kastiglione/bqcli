#!/usr/bin/env python3

import ast
import astor
import subprocess
import sys


class Prefixer(ast.NodeTransformer):
    # These supported query functions indicate which argument position to
    # insert expressions into.
    #
    # For example, given this expression:
    #     '//...' | filter(':name$')
    # The result is:
    #     filter(':name$', '//...')
    #
    # The FUNCTIONS dict indicate that the left side should be inserted into
    # position 1 of the `filter()` function.
    FUNCTIONS = {
        # "allpaths": -1,
        "attr": 2,
        # "buildfiles": -1,
        # "rbuildfiles": -1,
        "deps": 0,
        "filter": 1,
        "kind": 1,
        "labels": 1,
        # "loadfiles": -1,
        "rdeps": 1,
        # "allrdeps": -1,
        "same_pkg_direct_rdeps": 0,
        "siblings": 0,
        # "some": -1,
        # "somepath": -1,
        "tests": 0,
        # "visible": -1,
    }

    def visit_BinOp(self, node: ast.BinOp):
        # First, recursively transform nested pipe operators.
        node = self.generic_visit(node)

        # Handle | operations only.
        if not isinstance(node.op, ast.BitOr):
            return node

        # Handle two kinds of | pipes:
        #   1. x | f(args)
        #   2. x | f
        # The first is an `ast.Call`, the second `ast.Name`.
        if isinstance(node.right, ast.Call):
            func = node.right.func.id
        elif isinstance(node.right, ast.Name):
            func = node.right.id
        else:
            return node

        # Handle only known `bazel query` functions.
        if func not in self.FUNCTIONS:
            return node

        if isinstance(node.right, ast.Call):
            # Move expression on the left side of the | operation into the args
            # of the function on the right.
            right = node.right
            position = self.FUNCTIONS[func]
            right.args.insert(position, node.left)
        elif isinstance(node.right, ast.Name):
            # The right side is a function, but a reference by `Name`, not a
            # `Call`. Create an `Call` node where the single argument is the
            # left side of the | operation (aka node.left).
            right = ast.Call(node.right, args=[node.left], keywords=[])

        return ast.copy_location(right, node)


def _main():
    expression = sys.argv[1]
    rewriter = Prefixer()
    query = rewriter.visit(ast.parse(expression))
    command = ["bazel", "query", astor.to_source(query)]
    subprocess.check_call(command)


if __name__ == "__main__":
    _main()
